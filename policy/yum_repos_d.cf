bundle common yum_repos_d_file_control
{
  vars:
    "input[lib]" string => "$(this.promise_dirname)/lib.cf";
    "inputs" slist => getvalues(input);
}

body file control
{
  inputs => { @(yum_repos_d_file_control.inputs) };
}

bundle agent yum_repos_d(extra_repo_files_state, data_interface_bundle)
#@brief Manage yum client configuration in /etc/yum.repos.d

# This bundle looks in data_interface_bundle for a variable named 'data'. This
# variable needs to be either a datacontainer or a classic cfengine array. It
# expects to find a key named for itself 'yum_repos_d'and under that key a key
# for each repository to be configured. This allows for very flexible data
# construction, and other keys will be ignored. This bunlde will reconstruct
# the data under its key locally into a classic array. This is done to support
# expansion of cfengine variables within a data container.

#@param extra_repo_files_state (purge|keep)
#@param data_interface_bundle The bundle in which to look for 'data'
{
  vars:
    "yum_repos_d" string => "/etc/yum.repos.d";
    # The data interface bundle could provide data that was read from json, or
    # that is defined in a classic cfengine array. Json data does not
    # dereference cfengine variables, so to support that use case we
    # reconstruct a classic array here.

    # First get a list of the repositories
    "repo_ids" slist => getindices("$(data_interface_bundle).data[$(this.bundle)]");

    "keys[$(repo_ids)]"
      slist => getindices("$(data_interface_bundle).data[$(this.bundle)][$(repo_ids)]");

    "data[$(repo_ids)][$(keys[$(repo_ids)])]"
      string => "$($(data_interface_bundle).data[$(this.bundle)][$(repo_ids)][$(keys[$(repo_ids)])])",
      ifvarclass => "have_$(repo_ids)_$(keys[$(repo_ids)])";

    "requested_repo_files" slist => maplist("$(this).repo", @(repo_ids));

  classes:
      "have_$(repo_ids)_$(keys[$(repo_ids)])"
        expression => isvariable("$(data_interface_bundle).data[$(this.bundle)][$(repo_ids)][$(keys[$(repo_ids)])]");

      "purge_extra_repo_files" expression => strcmp("purge", "$(extra_repo_files_state)");
      "keep_extra_repo_files" expression => strcmp("keep", "$(extra_repo_files_state)");
      "extra_repo_files_state_invalid_option"
        expression => "!(purge_extra_repo_files|keep_extra_repo_files)";

  files:
      "$(yum_repos_d)/$(repo_ids).repo"
        create => "true",
        edit_line => manage_yum_sections("$(this.bundle).data", "$(repo_ids)"),
        edit_defaults => empty;

    purge_extra_repo_files::
      "$(yum_repos_d)/.*.repo"
        delete => tidy,
        file_select => ex_list(@(requested_repo_files)),
        comment => "Make sure that we have no extra .repo files here, we only
                    want repos that we specify to exist.";

  reports:
    DEBUG|DEBUG_yum_repos_d::
      "DEBUG $(this.bundle)";
      "$(const.t)Extra repo files in '$(yum_repos_d)': '$(extra_repo_files_state)'";
      "$(const.t)Invalid option for 'extra_repo_files_state' valid options are 'purge' or 'keep'. Defaulting to 'keep'"
        ifvarclass => "extra_repo_files_state_invalid_option";
      "$(const.t)repo: [$(repo_ids)] $(keys[$(repo_ids)])=$(data[$(repo_ids)][$(keys[$(repo_ids)])])";
      "$(const.t)requested_repo_file: '$(requested_repo_files)'";
}
