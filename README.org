* yum
** yum_repos_d
Manage yum repository client configuration files residing in
`/etc/yum.repos.d/*.repo`.

This bundle looks in data_interface_bundle for a variable named
'data'. This variable needs to be either a datacontainer or a classic
cfengine array. It expects to find a key named for itself
'yum_repos_d'and under that key a key for each repository to be
configured. This allows for very flexible data construction, and other
keys will be ignored. This bunlde will reconstruct the data under its
key locally into a classic array. This is done to support expansion of
cfengine variables within a data container.

- @param extra_repo_files_state Defines weather to keep or purge
  unspecified repo files. (purge|keep) Defaults to keep.
- @param data_interface_bundle The bundle in which to look for 'data'

Enabled by setting the class `enable_yum_repos_d`

*** Example Usage
#+begin_src cfengine
  bundle agent example_usage
  {
    methods:

      production::
        "converge_data" usebundle => yum_repos_d_data_bundle_pure_policy_example;
        "repos" usebundle => yum_repos_d("purge", "yum_repos_d_data_bundle_pure_policy_example");
      development::
        "converge_data" usebundle => yum_repos_d_data_bundle_readjson_example;
        "repos" usebundle => yum_repos_d("keep", " yum_repos_d_data_bundle_readjson_example");
  }
  
  # Example data interface bundles
  bundle agent yum_repos_d_data_bundle_pure_policy_example
  {
    vars:
      "data[yum_repos_d][updates][name]" string => "CentOS Updates";
      "data[yum_repos_d][updates][baseurl]" string => "http://my.yum/repo";
      "data[yum_repos_d][updates][enable]" string => "1";
      "data[yum_repos_d][updates][gpgcheck]" string => "0";
      "data[yum_repos_d][updates][gpgkey]" string => "http://mirror.cisp.com/CentOS/6/os/i386/RPM-GPG-KEY-CentOS-6";
      "data[yum_repos_d][updates][proxy]" string => "FUCKIt";
  }
  
  bundle agent yum_repos_d_data_bundle_parsejson_example
  {
    vars:
      "data" data => parsejson('
  {
    "yum_repos_d" {
  
    "updates": {
      "name": "CentOS Updates",
      "baseurl": "http://$(locations.rpm_repo)/repo",
      "enable": "1",
      "gpgcheck": "0",
      "gpgkey": "http://mirror.cisp.com/CentOS/6/os/i386/RPM-GPG-KEY-CentOS-6"
    }
  }
  }');
  }
  
  bundle agent yum_repos_d_data_bundle_readjson_example
  {
    vars:
      "data_file" string => "$(this.promise_diranme)../data/$(this.bundle).json";
        
      "data" data => readjson( $(data_file), 1M );
        
    classes:
      "data_file_exists" expression => fileexists( $(data_file) );
  }
#+end_src

** yum_inventory
Inventory information about yum

All inventory information is cached. If you would like to invalidate the cache you may do so using the following classes:

- yum_info_yum_cache_invalid
- yum_repolist_disabled_cache_invalid
- yum_repollist_enabled_cache_invalid

Enabled by setting the class `enable_yum_inventory`

Ensure the policy is activated

#+begin_src cfengine
  methods:
    !redhat_4.(redhat|centos)::
      "yum" usebundle => yum_inventory;
#+end_src

#+caption: Mission Portal Invetory Report Additional Attributes
[[images/2015-01-30-Selection_001.jpg]]

#+caption: Mission Portal Inventory Report Yum Plugins Loaded & Enabled Repositories
[[images/2015-01-30-Selection_002.jpg]]

[[images/2015-01-30-Selection_003.jpg]]

*** yum_inventory_yum_info_yum
Inventory interesting information about yum. Currently this includes
the yum plugins (if any) which are loaded.

Variables for enabled plugins are defined and tagged for use in
CFEngine Enteprise Mission Portals Inventory interface. Classes are
defined for each loaded plugin in the form
`yum_plugin_<plugin_name>_loaded`.

*** yum_inventory_yum_repolist
Inventory interesting information about the yum repositories configured.

Variables for each enabled and disabled repository are defined and
tagged for use in CFEngine Enterprise Mission Poratls Inventory
interface. Classes are defined for each configured repo in the form
`yum_repo_<repo_id>_enabled` or `yum_repo_<repo_id>_disabled`.

** How to integrate into your policy
First get the policy into your masterfiles

#+beign_src sh
  cd /tmp
  export MASTERFILES=/home/nickanderson/CFEngine/masterfiles
  git clone https://github.com/nickanderson/yum.git
  cd yum
  mkdir -p $MASTERFILES/services/yum
  git archive master | tar -x -C $MASTERFILES/services/yum
#+end_src

Include def.cf into your inputs

#+begin_src cfengine
  body common control
  {
        inputs => { 
                    # Reports
                    @(cfengine_reports.inputs),
  
                   "services/yum/def.cf",
                    
                    # autorun system
                    @(services_autorun.inputs),
        };
  }
#+end_src

Ensure the features you want are enabled, (this should be done in a
file that is included in inputs BEFORE the yum policy, for example
def.cf) and that the policy will be activated. Note: if the feature is
not enabled, it will not be included in inputs, and will be
unavailable for use.

#+begin_src cfengine
  classes:
    "enable_yum_inventory"
      expression => "any",
      comment => "Enable yum inventory reporting";

    "enable_yum_repos_d"
      expression => "any",
      comment => "Enable policy to manage yum repository client configs
                  in /etc/yum.repos.d";
#+end_src
